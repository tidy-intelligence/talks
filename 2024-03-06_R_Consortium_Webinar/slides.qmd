---
title: "Tidy Finance and Accessing Financial Data"
subtitle: "R Consortium Webinar"
author: "Christoph Scheuch"
date: "March 6th, 2024"
execute: 
  echo: true
  message: false
  warning: false
  cache: true
format:
  revealjs:
    transition: fade 
    slide-number: true
    theme: assets/scss/slides.scss
    css: assets/css/styles.css
---

```{r}
#| echo: false
library(tidyverse)
```


## What is Tidy Finance?

A **transparent**, **open-source** approach to financial economics research, featuring **multiple programming languages**

![](assets/img/tidy-finance-r-cover.png){width=100%}

* Learn about empirical applications using tidy principles
* Teach students the importance of reproducible research
* Contribute to reproducible finance via our blog

## Why Tidy?

Code should not just be correct, but also **easy to read**:

1. Design of humans.
2. Embrace functional programming.
3. Compose simple functions.
4. Reuse existing data structures.

Combined with **tidy data** and **reproducible workflows**

## Example code chunks

```{r}
#| eval: false
#| echo: true
# Load packages
library(tidyverse)
library(tidyquant)

# Download symbols of DOW index
symbols <- tq_index(x = "DOW") |> 
  filter(company != "US DOLLAR")

# Download prices of DOW index constituents
prices <- tq_get(x = symbols, get = "stock.prices", 
                 from = "2000-01-01", to = "2022-12-31")

# Calculate returns
returns <- prices |>
  group_by(symbol) |>
  mutate(ret = adjusted / lag(adjusted) - 1) |>
  select(symbol, date, ret) |>
  drop_na(ret)
```

## Welcoming contributions on our blog 

![](assets/img/tidy-finance-blog-overview.png)

## Maintainers of tidy-finance.org

<br>
<br>

![](assets/img/tidy-finance-team.png) 

## We also wrote books

INSERT BOOK COVERS

# Accessing & Managing Financial Data

## Importance of organizing data efficiently

- **Challenge:** ensure consistency across various data sources
- **Solution:** 
  - Use R to import, prepare & store data 
  - Use SQLite to organize data in a database
- **R Packages:** 
  - Manipulation: `tidyverse`, 
  - Import: `tidyquant`, `frenchdata`, `readxl`, 
  - Storage: `RSQLite`

## Fama-French factors & portfolios{.smaller}

Most popular data for asset pricing tests due to Fama and French (1993)

```{r}
library(frenchdata)

factors_ff3_monthly_raw <- download_french_data("Fama/French 3 Factors")
factors_ff3_monthly <- factors_ff3_monthly_raw$subsets$data[[1]] |>
  mutate(
    month = floor_date(ymd(str_c(date, "01")), "month"),
    across(c(RF, `Mkt-RF`, SMB, HML), ~as.numeric(.) / 100),
    .keep = "none"
  ) |>
  rename_with(str_to_lower) |>
  rename(mkt_excess = `mkt-rf`) |>
  select(month, everything())

print(factors_ff3_monthly, n = 5)
```

## q-Factors{.smaller}

Recent alternative to Fama-French data by Hou, Xue, and Zhang (2014)

```{r}
library(readr)

factors_q_monthly_link <-
  "https://global-q.org/uploads/1/2/2/6/122679606/q5_factors_monthly_2022.csv"

factors_q_monthly <- read_csv(factors_q_monthly_link) |>
  mutate(month = ymd(str_c(year, month, "01", sep = "-"))) |>
  select(-R_F, -R_MKT, -year) |>
  rename_with(~ str_remove(., "R_")) |>
  rename_with(~ str_to_lower(.)) |>
  mutate(across(-month, ~ . / 100)) 

print(factors_q_monthly, n = 5)
```

## Macroeconomic predictors{.smaller}

Collection of variables for equity premium prediction (Welch & Goyal, 2008)

```{r}
#| eval: false
library(readxl)

download.file(
  url = "https://docs.google.com/spreadsheets/d/1g4LOaRj4TvwJr9RIaA_nwrXXWTOy46bP/export?format=xlsx", 
  destfile = "macro_predictors.xlsx", 
  mode = "wb"
)

macro_predictors <- read_xlsx("macro_predictors.xlsx", sheet = "Monthly") |> 
  mutate(
    # Several cleaning steps & variable transformations...
  )
```

```{r}
#| echo: false
library(readxl)

doc_id <- "1g4LOaRj4TvwJr9RIaA_nwrXXWTOy46bP"
url <- paste0("https://docs.google.com/spreadsheets/d/", 
              doc_id, "/export?format=xlsx")
destfile <- "macro_predictors.xlsx"
download.file(url = url, destfile = destfile, mode = "wb")

macro_predictors <- read_xlsx(
  "macro_predictors.xlsx",
  sheet = "Monthly"
) |>
  mutate(month = ym(yyyymm)) |>
  mutate(across(where(is.character), as.numeric)) |>
  mutate(
    IndexDiv = Index + D12,
    logret = log(IndexDiv) - log(lag(IndexDiv)),
    Rfree = log(Rfree + 1),
    rp_div = lead(logret - Rfree, 1), # Future excess market return
    dp = log(D12) - log(Index), # Dividend Price ratio
    dy = log(D12) - log(lag(Index)), # Dividend yield
    ep = log(E12) - log(Index), # Earnings price ratio
    de = log(D12) - log(E12), # Dividend payout ratio
    tms = lty - tbl, # Term spread
    dfy = BAA - AAA # Default yield spread
  ) |>
  select(month, rp_div, dp, dy, ep, de, svar, bm = `b/m`, ntis, tbl, lty, ltr,tms, dfy, infl) |>
  drop_na()

print(macro_predictors, n = 5)
```

## Other macroeconomic data{.smaller}

10K data sets via Federal Reserve Economic Data (FRED) database 

```{r}
library(tidyquant)

# Example: consumer price index (CPI)
cpi_monthly <- tq_get("CPIAUCNS", get = "economic.data") |>
  mutate(
    month = floor_date(date, "month"),
    cpi = price / price[month == max(month)],
    .keep = "none"
  )
print(cpi_monthly, n = 5)
```


## Use SQLite database for storage{.smaller}

```{r}
#| eval: false
library(RSQLite)
library(dbplyr)

# Create database
tidy_finance <- dbConnect(
  SQLite(), "tidy_finance_r.sqlite", extended_types = TRUE
)

# Write data to database
dbWriteTable(
  conn = tidy_finance, 
  name = "factors_ff3_monthly", 
  value = factors_ff3_monthly, 
  overwrite = TRUE
)

# Load data from database
factors_ff3_monthly <- tbl(tidy_finance, "factors_ff3_monthly") |> 
  collect()
```


## Why SQLite?

**Pros:**

- Lightweight, self-contained, serverless database engine
- Great for education purposes or prototyping

**Cons:**

- Limitations with respect to very large data & concurrency
- Transfer to other languages cumbersome (e.g. Python)

# WRDS & Other Data Providers

## Wharton Research Data Services (WRDS)

- Popular provider of financial & economic data
- Focus on academic audience & research applications
- Access via `RPostgres` package
- Main data used in Tidy Finance
  - **CRSP:** historical monthly & daily returns for US stocks
  - **Compustat:** historical accounting data for US companies
  - **Mergent FISD:** characteristics of US corporate bonds
  - **TRACE:** detailed US corporate bond transactions
  
## Glimpse at historical stock data

INSERT STOCKS BY LISTING EXCHANGE

## Glimpse at historical bond data

INSERT NUMBER OF BONDS OUTSTANDING

## Other data providers

- Large ecosystem of alternative data providers
- Growing collection of R packages on [tidy-finance.org](https://www.tidy-finance.org/r/other-data-providers.html)
- Examples: `fredr`, `ecb`, `Rblpapi`, `Quandl`, `edgarWebR`, ...
- Reach out via contact@tidy-finance.org if we missed something

INSERT SOME IMAGE

## Wraping-up

INSERT PROMOTION OF tidyfinance R PACKAGE?

- Read our open source material at tidy-finance.org
- Get in touch for teaching materials (slides, solutions)
- Contribute to mission of reproducible finance via our blog

```{r}
#| echo: false
#| output: false
file.remove("macro_predictors.xlsx")
file.remove("tidy_finance_r.sqlite")
```

