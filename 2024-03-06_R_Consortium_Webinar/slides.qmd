---
title: "Tidy Finance and Accessing Financial Data"
subtitle: "R Consortium Webinar"
author: "Christoph Scheuch"
date: "2024-03-06"
execute: 
  echo: true
  message: false
  warning: false
  cache: true
format:
  revealjs:
    transition: fade 
    slide-number: true
    theme: assets/scss/slides.scss
    css: assets/css/styles.css
    title-slide-attributes:
      data-background-image: "assets/img/tidy-finance-r-cover.png"
---

```{r}
#| echo: false
library(tidyverse)
```


## What is Tidy Finance?

A **transparent**, **open-source** approach to research in financial economics, featuring **multiple programming languages**

<br>

**tidy-finance.org** offers tools to:

* Learn about empirical applications using tidy principles
* Learn to work with financial data in a tidy manner
* Teach students the importance of reproducible research
* Contribute to reproducible finance research via our blog

## Why Tidy? 

Code should not just be correct, but also follow principles:

1. Design so that code is **easy to read** for humans
2. **Compose simple functions** to solve complex problems
3. **Embrace functional programming** for reproducible results
4. **Reuse data structures** across applications

<br>

Focus of this talk: **tidy data**

## Recap: what is *tidy data*?

![llustrations from the Openscapes blog Tidy Data for reproducibility, efficiency, and collaboration by Julia Lowndes and Allison Horst](assets/img/alison-horst-tidy-data.jpeg){width=100%}

## Example chunks with *tidy code*{.smaller}

::: {.panel-tabset}

### R
```{r}
#| eval: false
#| echo: true
# Load packages
library(tidyverse)
library(tidyquant)

# Download symbols of DOW index
symbols <- tq_index(x = "DOW") |> 
  filter(company != "US DOLLAR")

# Download prices of DOW index constituents
prices <- tq_get(x = symbols, get = "stock.prices", 
                 from = "2000-01-01", to = "2022-12-31")

# Calculate returns
returns <- prices |>
  group_by(symbol) |>
  mutate(ret = adjusted / lag(adjusted) - 1) |>
  select(symbol, date, ret) |>
  drop_na(ret)
```
### Python
```{python}
#| eval: false
#| echo: true
# Load libraries
import pandas as pd
import numpy as np
import yfinance as yf

# Download symbols of DOW index
url = ("https://www.ssga.com/us/en/institutional/etfs/library-content/"
       "products/fund-data/etfs/us/holdings-daily-us-en-dia.xlsx")
symbols = (pd.read_excel(url, skiprows=4, nrows=30)
  .get("Ticker")
  .tolist()
)

# Download prices of DOW index constituents
index_prices = (yf.download(tickers=symbols, start="2000-01-01", end="2022-12-31")
  .melt(ignore_index=False, var_name=["variable", "symbol"])
  .reset_index()
  .pivot(index=["Date", "symbol"], columns="variable", values="value")
  .reset_index()
  .rename(columns={"Date": "date", "Open": "open", "High": "high", "Low": "low", 
                   "Close": "close", "Adj Close": "adjusted", "Volume": "volume"})
)

# Calculate returns
all_returns = (index_prices
  .assign(ret=lambda x: x.groupby("symbol")["adjusted"].pct_change())
  .get(["symbol", "date", "ret"])
  .dropna(subset="ret")
)
```
:::


## Welcoming contributions on our blog 

![](assets/img/tidy-finance-blog-overview.png)

## Maintainers of tidy-finance.org

<br>
<br>

![](assets/img/tidy-finance-team.png) 

## We also wrote books

::: {layout-ncol=2}
![](assets/img/tidy-finance-r-book.jpg){width=75%}

![](assets/img/tidy-finance-python-book.jpeg){width=75%}
:::

# Accessing & Managing Financial Data

## Importance of organizing data efficiently

- **Challenge:** ensure consistency across various data sources
- **Solution:** 
  - Use R to import, prepare & store data 
  - Use SQLite to organize data in a database
- **R Packages:** 
  - Manipulation: `tidyverse`
  - Import: `tidyquant`, `frenchdata`, `readxl`
  - Storage: `RSQLite`

## Fama-French factors & portfolios{.smaller}

Most popular data for asset pricing tests since Fama and French (1993)

```{r}
library(frenchdata)

factors_ff3_monthly_raw <- download_french_data("Fama/French 3 Factors")
factors_ff3_monthly <- factors_ff3_monthly_raw$subsets$data[[1]] |>
  mutate(
    month = floor_date(ymd(str_c(date, "01")), "month"),
    across(c(RF, `Mkt-RF`, SMB, HML), ~as.numeric(.) / 100),
    .keep = "none"
  ) |>
  rename_with(str_to_lower) |>
  rename(mkt_excess = `mkt-rf`) |>
  select(month, everything())

print(factors_ff3_monthly, n = 5)
```

## q-Factors{.smaller}

Alternative to Fama-French data by Hou, Xue, and Zhang (2014)

```{r}
library(readr)

factors_q_monthly_link <-
  "https://global-q.org/uploads/1/2/2/6/122679606/q5_factors_monthly_2022.csv"

factors_q_monthly <- read_csv(factors_q_monthly_link) |>
  mutate(month = ymd(str_c(year, month, "01", sep = "-"))) |>
  select(-R_F, -R_MKT, -year) |>
  rename_with(~ str_remove(., "R_")) |>
  rename_with(~ str_to_lower(.)) |>
  mutate(across(-month, ~ . / 100)) 

print(factors_q_monthly, n = 5)
```

## Macroeconomic predictors{.smaller}

Collection of variables for equity premium prediction (Welch & Goyal, 2008)

```{r}
#| eval: false
library(readxl)

download.file(
  url = "https://docs.google.com/spreadsheets/d/1g4LOaRj4TvwJr9RIaA_nwrXXWTOy46bP/export?format=xlsx", 
  destfile = "macro_predictors.xlsx", 
  mode = "wb"
)

macro_predictors <- read_xlsx("macro_predictors.xlsx", sheet = "Monthly") |> 
  mutate(
    # Several cleaning steps & variable transformations...
  )
```

```{r}
#| echo: false
library(readxl)

doc_id <- "1g4LOaRj4TvwJr9RIaA_nwrXXWTOy46bP"
url <- paste0("https://docs.google.com/spreadsheets/d/", 
              doc_id, "/export?format=xlsx")
destfile <- "macro_predictors.xlsx"
download.file(url = url, destfile = destfile, mode = "wb")

macro_predictors <- read_xlsx(
  "macro_predictors.xlsx",
  sheet = "Monthly"
) |>
  mutate(month = ym(yyyymm)) |>
  mutate(across(where(is.character), as.numeric)) |>
  mutate(
    IndexDiv = Index + D12,
    logret = log(IndexDiv) - log(lag(IndexDiv)),
    Rfree = log(Rfree + 1),
    rp_div = lead(logret - Rfree, 1), # Future excess market return
    dp = log(D12) - log(Index), # Dividend Price ratio
    dy = log(D12) - log(lag(Index)), # Dividend yield
    ep = log(E12) - log(Index), # Earnings price ratio
    de = log(D12) - log(E12), # Dividend payout ratio
    tms = lty - tbl, # Term spread
    dfy = BAA - AAA # Default yield spread
  ) |>
  select(month, rp_div, dp, dy, ep, de, svar, bm = `b/m`, ntis, tbl, lty, ltr,tms, dfy, infl) |>
  drop_na()

print(macro_predictors, n = 5)
```

## Other macroeconomic data{.smaller}

10K data sets available via Federal Reserve Economic Data (FRED) database 

```{r}
library(tidyquant)

# Example: consumer price index (CPI)
cpi_monthly <- tq_get("CPIAUCNS", get = "economic.data") |>
  mutate(
    month = floor_date(date, "month"),
    cpi = price / price[month == max(month)],
    .keep = "none"
  )
print(cpi_monthly, n = 5)
```


## Use SQLite database for storage{.smaller}

```{r}
#| eval: false
library(RSQLite)
library(dbplyr)

# Create database
tidy_finance <- dbConnect(
  SQLite(), "tidy_finance_r.sqlite", extended_types = TRUE
)

# Write data to database
dbWriteTable(
  conn = tidy_finance, 
  name = "factors_ff3_monthly", 
  value = factors_ff3_monthly, 
  overwrite = TRUE
)

# Load data from database
factors_ff3_monthly <- tbl(tidy_finance, "factors_ff3_monthly") |> 
  collect()
```


## Why SQLite?

**Pros:**

- Lightweight, self-contained, serverless database engine
- Great for education purposes or prototyping

**Cons:**

- Limitations with respect to very large data & concurrency
- Transfer to other languages cumbersome (e.g. Python)


# WRDS & Other Data Providers

## Wharton Research Data Services (WRDS)

- Popular provider of financial & economic data
- Focus on academic audience & research applications
- Access via `RPostgres` package
- Main data used in Tidy Finance
  - **CRSP:** historical monthly & daily returns for US stocks
  - **Compustat:** historical accounting data for US companies
  - **Mergent FISD:** characteristics of US corporate bonds
  - **TRACE:** detailed US corporate bond transactions
  
## Glimpse at historical stock data

![](assets/img/crsp-stocks-by-exchange.png){width=100%}

## Glimpse at historical bond data{.center}

![](assets/img/trace-fisd-bonds.png){width=100%}

## Other data providers

Large ecosystem of alternative data providers

- Extensive list of R packages on [tidy-finance.org](https://www.tidy-finance.org/r/other-data-providers.html)
- Examples: `fredr`, `ecb`, `Rblpapi`, `Quandl`, `edgarWebR`, etc.

<br>

Are we missing an important package?

- please reach out via **contact@tidy-finance.org**

# Wrap-up

## Tidy approach to teaching & research

`tidyfinance` R package to access financial data in a tidy way:

```{r}
#| eval: false
#| echo: true
install.packages("tidyfinance")

tidyfinance::download_data(
  type = "wrds_crsp_monthly", 
  start_date = "1960-01-01", end_date = "2020-12-31"
)
```

<br>

- Detailed open source material at **tidy-finance.org**
- Get in touch for **teaching materials** & to **contribute to blog**
- Follow me for news [linkedin.com/in/christophscheuch](linkedin.com/in/christophscheuch)

```{r}
#| echo: false
#| output: false
file.remove("macro_predictors.xlsx")
file.remove("tidy_finance_r.sqlite")
```

